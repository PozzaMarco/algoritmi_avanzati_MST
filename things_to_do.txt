1) Creazione delle strutture dati per la manipolazione e rappresentazione dei grafi:

  1.1 Scegliere una delle due (elencandone i pro e i contro)
        - Lista di adiacenza [V]
        - Matrice di adiacenza [V]

  1.2 Creazione di tutti i metodi necessari per il loro utilizzo:
        - Dato un grafo G ritornare il numero di vertici e lati di G [V] 
        - Creazione della struttura dati scelta [V]
        - Dato un grafo G inizializzare la struttura dati scelta [V]
        - Recupero delle informazioni dalla struttura dati:
              -- Dato un nodo V recuperare la lista di nodi a lui collegato [V]
              -- Data una coppia di nodi V e W dire se sono collegati [V]

  1.3 Creazione delle seguenti strutture:
      -- Oggetto "Weight" che contiene tutti i pesi dei lati tra due nodi [V]
          (JSON o mappa key-value)
      -- Metodo W(V,W) ritorna il peso del lato che collega V e W, NaN altrimenti [V]
          Siccome usiamo grafi non orientati, W(V,W) == W(W,V) il peso non va salvato
          due volte.

2) Craezione delle strutture dati necessarie per lo sviluppo degli algoritmi:

  2.1 Heap [V]:
    -- Lo "heap" è una lista o array ordinato di "heapNode" per "value" (minHeap o maxHeap) [V]
    -- Metodo per la creazione dello "heap" dati gli "heapNode" (quindi devo ordinarla) [V]
    -- Metodo di inserimento nuovo elemento mantenendo lo heap ordinato [V]
    -- Metodo di estrazione del minimo (extractMin) mantenendo lo heap ordinato [V]
    -- Metodo di eliminazione di un "heapNode" dato come parametro mantenendo lo heap ordinato[V]

  2.2 Union-Find [V]
    -- Inizializzazione e creazione della struttura dati [V]
    -- Prevedere il campo aggiuntivo "size" che ritorna il numero di elementi dell'albero [V]
    -- Metodo di Find [V]
    -- Metodo di Union [V]

3) Implementazione dell'algoritmo di Prim con Heap [-]
    -- Creazione di un array key[] [V]
        Rappresenta il peso minimo di un qualsiasi lato che collega un nodo all'albero
    -- Creazione array parent[] [V]
        Rappresenta il padre che connette il nodo all'albero

4) Implementazione dell'algoritmo di Kruskal:

    4.1 Metodo Naive [-]
     -- Naive richiede che la lista di lati sia aciclica quindi bisogna creare:
     -- Inizializzare un oggetto parents che contiene, per ogni nodo, il padre;
     -- Inizializzare un oggetto visited che dice se un nodo è già stato visitato o no;
        
    4.2 Usando Union-Find [V]

5) Valutare se conviene separare AdjacencyList e EdgesList o se conviene lasciarle insieme [V]

//========================================================================================
/*                                                                                      *
 *                                    Considerazioni                                    *
 *                                                                                      */
//========================================================================================

Le liste di adiacenza sono preferibili quando il numero di lati (archi) è relativamente piccolo
rispetto al numero di nodi dei grafi che si stanno considerando (grafo sparso).

Le matrici di adiacenza sono preferibili quando il grafo è denso ovvero quando il numero di
lati è circa quadratico rispetto al numero di nodi.

La matrice ha una complessità di accesso inferiore rispetto alla lista di adiacenza in quanto,
dati due nodi, è facile vedere se sono connessi però occupa, in memoria, piu spazio rispetto 
alla lista di adiacenza.

La differenza tra le due si vede ancora di piu se prendiamo grafi orientati. 
Mentre la matrice di adiacenza mantiene comunque le sue dimensioni perchè mantiene tutte le 
informazioni riguardo ogni coppia di nodi, la lista di adiacenza si riduce perchè mantiene
solamente i collegamenti esistenti tra due nodi.

Riassumento abbiamo che lo spazio in memoria:
    - Matrici di adiacenza (memoria dipende dai nodi):
      -- Grafi orientati: |V|^2
      -- Grafi non orientati: |V|

    - Liste di adiacenza (memoria dipende dai lati):
      -- Grafi orientati: |E|
      -- Grafi non orientati: 2|E|

Altre considerazioni che si possono fare sono le seguenti:
  -Matrici di adiacenza:
    -- è facile e veloce controllare la presenza o assenza di un lato tra due nodi
    -- lenta iterazione su tutti i lati
    -- lenta aggiunta e rimozione dei nodi con complessità O(n^2)
    -- facile e veloce aggiunta di un lato tra due nodi O(1)

  -Liste di adiacenza:
    -- trovare la presenza di un lato tra due nodi è piu lento rispetto alla matrice in quanto
        la complessità è O(k) dove k è il numero di vicini dei nodi
    -- facile iterazione attraverso tutti i lati perchè è possibile recuperare i vicini direttamente
    -- aggiunta e rimozione di un nodo facile e veloce
    -- facile e veloce aggiunta di un lato tra due nodi O(1)

Di particolare rilevanza è che le liste di adiacenza, sia nel caso di grafi orientati che non, 
hanno una complessità θ(V+E) quindi, se il tempo di ricerca non è un problema sono da preferire
rispetto alle matrici di adiacenza.

//====================================== - LEGENDA - ====================================
/*                                                                                      *
 * [-] task da completare                                                               *
 * [V] task completato                                                                  *
 *                                                                                      */
//========================================================================================
